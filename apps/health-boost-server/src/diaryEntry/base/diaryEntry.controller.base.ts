/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DiaryEntryService } from "../diaryEntry.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DiaryEntryCreateInput } from "./DiaryEntryCreateInput";
import { DiaryEntry } from "./DiaryEntry";
import { DiaryEntryFindManyArgs } from "./DiaryEntryFindManyArgs";
import { DiaryEntryWhereUniqueInput } from "./DiaryEntryWhereUniqueInput";
import { DiaryEntryUpdateInput } from "./DiaryEntryUpdateInput";
import { FoodFindManyArgs } from "../../food/base/FoodFindManyArgs";
import { Food } from "../../food/base/Food";
import { FoodWhereUniqueInput } from "../../food/base/FoodWhereUniqueInput";
import { WorkoutFindManyArgs } from "../../workout/base/WorkoutFindManyArgs";
import { Workout } from "../../workout/base/Workout";
import { WorkoutWhereUniqueInput } from "../../workout/base/WorkoutWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DiaryEntryControllerBase {
  constructor(
    protected readonly service: DiaryEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiaryEntry })
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDiaryEntry(
    @common.Body() data: DiaryEntryCreateInput
  ): Promise<DiaryEntry> {
    return await this.service.createDiaryEntry({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DiaryEntry] })
  @ApiNestedQuery(DiaryEntryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async diaryEntries(@common.Req() request: Request): Promise<DiaryEntry[]> {
    const args = plainToClass(DiaryEntryFindManyArgs, request.query);
    return this.service.diaryEntries({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async diaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<DiaryEntry | null> {
    const result = await this.service.diaryEntry({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDiaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() data: DiaryEntryUpdateInput
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.updateDiaryEntry({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDiaryEntry(
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<DiaryEntry | null> {
    try {
      return await this.service.deleteDiaryEntry({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/foods")
  @ApiNestedQuery(FoodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Food",
    action: "read",
    possession: "any",
  })
  async findFoods(
    @common.Req() request: Request,
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<Food[]> {
    const query = plainToClass(FoodFindManyArgs, request.query);
    const results = await this.service.findFoods(params.id, {
      ...query,
      select: {
        calories: true,
        carbohydrates: true,
        createdAt: true,
        description: true,

        diaryEntry: {
          select: {
            id: true,
          },
        },

        fat: true,
        id: true,
        name: true,
        protein: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/foods")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async connectFoods(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: FoodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foods: {
        connect: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/foods")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async updateFoods(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: FoodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foods: {
        set: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/foods")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async disconnectFoods(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: FoodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      foods: {
        disconnect: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workouts")
  @ApiNestedQuery(WorkoutFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async findWorkouts(
    @common.Req() request: Request,
    @common.Param() params: DiaryEntryWhereUniqueInput
  ): Promise<Workout[]> {
    const query = plainToClass(WorkoutFindManyArgs, request.query);
    const results = await this.service.findWorkouts(params.id, {
      ...query,
      select: {
        caloriesBurned: true,
        createdAt: true,
        description: true,

        diaryEntry: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workouts")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async connectWorkouts(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        connect: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workouts")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async updateWorkouts(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        set: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workouts")
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "update",
    possession: "any",
  })
  async disconnectWorkouts(
    @common.Param() params: DiaryEntryWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        disconnect: body,
      },
    };
    await this.service.updateDiaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }
}
