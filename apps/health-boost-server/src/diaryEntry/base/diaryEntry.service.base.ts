/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DiaryEntry as PrismaDiaryEntry,
  Food as PrismaFood,
  Workout as PrismaWorkout,
  User as PrismaUser,
} from "@prisma/client";

export class DiaryEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiaryEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.diaryEntry.count(args);
  }

  async diaryEntries(
    args: Prisma.DiaryEntryFindManyArgs
  ): Promise<PrismaDiaryEntry[]> {
    return this.prisma.diaryEntry.findMany(args);
  }
  async diaryEntry(
    args: Prisma.DiaryEntryFindUniqueArgs
  ): Promise<PrismaDiaryEntry | null> {
    return this.prisma.diaryEntry.findUnique(args);
  }
  async createDiaryEntry(
    args: Prisma.DiaryEntryCreateArgs
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.create(args);
  }
  async updateDiaryEntry(
    args: Prisma.DiaryEntryUpdateArgs
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.update(args);
  }
  async deleteDiaryEntry(
    args: Prisma.DiaryEntryDeleteArgs
  ): Promise<PrismaDiaryEntry> {
    return this.prisma.diaryEntry.delete(args);
  }

  async findFoods(
    parentId: string,
    args: Prisma.FoodFindManyArgs
  ): Promise<PrismaFood[]> {
    return this.prisma.diaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .foods(args);
  }

  async findWorkouts(
    parentId: string,
    args: Prisma.WorkoutFindManyArgs
  ): Promise<PrismaWorkout[]> {
    return this.prisma.diaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workouts(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.diaryEntry
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
