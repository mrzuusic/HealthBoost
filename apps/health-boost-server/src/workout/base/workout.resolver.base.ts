/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Workout } from "./Workout";
import { WorkoutCountArgs } from "./WorkoutCountArgs";
import { WorkoutFindManyArgs } from "./WorkoutFindManyArgs";
import { WorkoutFindUniqueArgs } from "./WorkoutFindUniqueArgs";
import { CreateWorkoutArgs } from "./CreateWorkoutArgs";
import { UpdateWorkoutArgs } from "./UpdateWorkoutArgs";
import { DeleteWorkoutArgs } from "./DeleteWorkoutArgs";
import { DiaryEntry } from "../../diaryEntry/base/DiaryEntry";
import { WorkoutService } from "../workout.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Workout)
export class WorkoutResolverBase {
  constructor(
    protected readonly service: WorkoutService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async _workoutsMeta(
    @graphql.Args() args: WorkoutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Workout])
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async workouts(
    @graphql.Args() args: WorkoutFindManyArgs
  ): Promise<Workout[]> {
    return this.service.workouts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Workout, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "own",
  })
  async workout(
    @graphql.Args() args: WorkoutFindUniqueArgs
  ): Promise<Workout | null> {
    const result = await this.service.workout(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workout)
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "create",
    possession: "any",
  })
  async createWorkout(
    @graphql.Args() args: CreateWorkoutArgs
  ): Promise<Workout> {
    return await this.service.createWorkout({
      ...args,
      data: {
        ...args.data,

        diaryEntry: args.data.diaryEntry
          ? {
              connect: args.data.diaryEntry,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workout)
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "update",
    possession: "any",
  })
  async updateWorkout(
    @graphql.Args() args: UpdateWorkoutArgs
  ): Promise<Workout | null> {
    try {
      return await this.service.updateWorkout({
        ...args,
        data: {
          ...args.data,

          diaryEntry: args.data.diaryEntry
            ? {
                connect: args.data.diaryEntry,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Workout)
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "delete",
    possession: "any",
  })
  async deleteWorkout(
    @graphql.Args() args: DeleteWorkoutArgs
  ): Promise<Workout | null> {
    try {
      return await this.service.deleteWorkout(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DiaryEntry, {
    nullable: true,
    name: "diaryEntry",
  })
  @nestAccessControl.UseRoles({
    resource: "DiaryEntry",
    action: "read",
    possession: "any",
  })
  async getDiaryEntry(
    @graphql.Parent() parent: Workout
  ): Promise<DiaryEntry | null> {
    const result = await this.service.getDiaryEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
