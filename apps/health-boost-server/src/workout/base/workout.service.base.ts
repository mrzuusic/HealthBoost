/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Workout as PrismaWorkout,
  DiaryEntry as PrismaDiaryEntry,
} from "@prisma/client";

export class WorkoutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkoutCountArgs, "select">): Promise<number> {
    return this.prisma.workout.count(args);
  }

  async workouts(args: Prisma.WorkoutFindManyArgs): Promise<PrismaWorkout[]> {
    return this.prisma.workout.findMany(args);
  }
  async workout(
    args: Prisma.WorkoutFindUniqueArgs
  ): Promise<PrismaWorkout | null> {
    return this.prisma.workout.findUnique(args);
  }
  async createWorkout(args: Prisma.WorkoutCreateArgs): Promise<PrismaWorkout> {
    return this.prisma.workout.create(args);
  }
  async updateWorkout(args: Prisma.WorkoutUpdateArgs): Promise<PrismaWorkout> {
    return this.prisma.workout.update(args);
  }
  async deleteWorkout(args: Prisma.WorkoutDeleteArgs): Promise<PrismaWorkout> {
    return this.prisma.workout.delete(args);
  }

  async getDiaryEntry(parentId: string): Promise<PrismaDiaryEntry | null> {
    return this.prisma.workout
      .findUnique({
        where: { id: parentId },
      })
      .diaryEntry();
  }
}
