/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Food as PrismaFood,
  DiaryEntry as PrismaDiaryEntry,
} from "@prisma/client";

export class FoodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FoodCountArgs, "select">): Promise<number> {
    return this.prisma.food.count(args);
  }

  async foods(args: Prisma.FoodFindManyArgs): Promise<PrismaFood[]> {
    return this.prisma.food.findMany(args);
  }
  async food(args: Prisma.FoodFindUniqueArgs): Promise<PrismaFood | null> {
    return this.prisma.food.findUnique(args);
  }
  async createFood(args: Prisma.FoodCreateArgs): Promise<PrismaFood> {
    return this.prisma.food.create(args);
  }
  async updateFood(args: Prisma.FoodUpdateArgs): Promise<PrismaFood> {
    return this.prisma.food.update(args);
  }
  async deleteFood(args: Prisma.FoodDeleteArgs): Promise<PrismaFood> {
    return this.prisma.food.delete(args);
  }

  async getDiaryEntry(parentId: string): Promise<PrismaDiaryEntry | null> {
    return this.prisma.food
      .findUnique({
        where: { id: parentId },
      })
      .diaryEntry();
  }
}
